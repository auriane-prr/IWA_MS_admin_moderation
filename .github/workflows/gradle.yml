name: Java CI/CD with Gradle and Dokku

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    permissions:
      contents: read

    steps:
      # 1. Récupérer le code source
      - name: Checkout code
        uses: actions/checkout@v4

      # 2. Installer Java et Gradle
      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'temurin'

      - name: Setup Gradle
        uses: gradle/actions/setup-gradle@v4
        with:
          gradle-version: '8.10.2'

      # 3. Construire l'application avec Gradle
      - name: Build with Gradle Wrapper
        run: ./gradlew build

      # 4. Exécuter les tests
      - name: Run Tests
        run: ./gradlew test

      # 5. Construire les images Docker (application uniquement)
      - name: Build Docker Image
        run: |
          docker build -t iwa_ms_admin_moderation-app-1:latest -f Dockerfile .

      # 6. Valider la clé privée SSH
      - name: Validate SSH Private Key
        env:
          SSH_PRIVATE_KEY: ${{ secrets.SSH_PRIVATE_KEY }}
        run: |
          echo "Validating private key format"
          echo "${SSH_PRIVATE_KEY}" | ssh-keygen -lf /dev/stdin || { echo "Private key validation failed"; exit 1; }

      # 7. Configurer SSH et déboguer
      - name: Configure SSH
        env:
          SSH_PRIVATE_KEY: ${{ secrets.SSH_PRIVATE_KEY }}
        run: |
          echo "Step: Configuring SSH"

          # Supprimer toute configuration SSH résiduelle
          rm -rf ~/.ssh
          mkdir -p ~/.ssh
          chmod 700 ~/.ssh

          # Ajouter la clé privée
          echo "${SSH_PRIVATE_KEY}" > ~/.ssh/id_rsa || { echo "Failed to write private key"; exit 1; }
          chmod 600 ~/.ssh/id_rsa || { echo "Failed to set permissions on private key"; exit 1; }

          # Ajouter le serveur Dokku à known_hosts
          ssh-keyscan -H ${{ secrets.DOKKU_HOST }} >> ~/.ssh/known_hosts || { echo "Failed to add Dokku host to known_hosts"; exit 1; }
          chmod 644 ~/.ssh/known_hosts

          # Diagnostics
          echo "Step: Debugging SSH Configuration"
          echo "Checking SSH directory contents"
          ls -la ~/.ssh || echo "Failed to list ~/.ssh directory"

          echo "Checking private key content"
          cat ~/.ssh/id_rsa || echo "Private key not found or unreadable"

          echo "Checking known_hosts file"
          cat ~/.ssh/known_hosts || echo "Known hosts file is missing"

      # 8. Tester la connexion SSH
      - name: Test SSH Connection
        env:
          DOKKU_HOST: ${{ secrets.DOKKU_HOST }}
        run: |
          echo "Step: Testing SSH Connection"
          ssh -i ~/.ssh/id_rsa -o StrictHostKeyChecking=no dokku@${{ secrets.DOKKU_HOST }} apps:list || { echo "SSH connection failed"; exit 1; }

      # 9. Déployer l'application sur Dokku
      - name: Deploy App to Dokku
        env:
          DOKKU_HOST: ${{ secrets.DOKKU_HOST }}
          DOKKU_APP: iwa_ms_admin_moderation
        run: |
          echo "Step: Deploying Application to Dokku"

          # Créer l'application Dokku si elle n'existe pas
          ssh dokku@${{ secrets.DOKKU_HOST }} apps:create $DOKKU_APP || true

          # Configurer la base de données PostgreSQL
          ssh dokku@${{ secrets.DOKKU_HOST }} postgres:create iwa_ms_admin_moderation_db || true
          ssh dokku@${{ secrets.DOKKU_HOST }} postgres:link iwa_ms_admin_moderation_db $DOKKU_APP || true

          # Configurer les variables d'environnement
          ssh dokku@${{ secrets.DOKKU_HOST }} config:set $DOKKU_APP SPRING_DATASOURCE_USERNAME=postgres SPRING_DATASOURCE_PASSWORD=postgres

          # Importer l'image Docker dans Dokku
          docker save iwa_ms_admin_moderation-app-1:latest | bzip2 | ssh dokku@${{ secrets.DOKKU_HOST }} docker-import $DOKKU_APP

          # Redémarrer l'application sur Dokku
          ssh dokku@${{ secrets.DOKKU_HOST }} ps:restart $DOKKU_APP
